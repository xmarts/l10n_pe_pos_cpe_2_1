odoo.define('l10n_pe_pos_cpe_2_1.l10n_pe_pos_cpe', function (require) {
"use strict";

var models = require('point_of_sale.models');
//var screens = require('point_of_sale.screens');
var PaymentScreen = require('point_of_sale.PaymentScreen')
var ReceiptScreen = require('point_of_sale.ReceiptScreen')

var PosDB =require('point_of_sale.DB');
var core    = require('web.core');
//var Model = require('web.DataModel');
var rpc = require('web.rpc')
var QWeb = core.qweb;
var _t      = core._t;

var PosModelSuper = models.PosModel;
var PosDBSuper = PosDB;
var OrderSuper = models.Order;
var _super_Order = models.Order.prototype;


const Registries = require('point_of_sale.Registries');
const session = require('web.session');

for(var i=0; i<models.length; i++){

    var model=models[i];

    if(model.model === 'res.partner'){
        model.fields.push('doc_number');
    }
}
models.load_fields("res.company", ["nro_resolucion","logo_ticket"]);


/*
PosDB.include({

    _partner_search_string: function(partner){
        var str =  partner.name;
        if(partner.barcode){
            str += '|' + partner.barcode;
        }
        if(partner.address){
            str += '|' + partner.address;
        }
        if(partner.phone){
            str += '|' + partner.phone.split(' ').join('');
        }
        if(partner.mobile){
            str += '|' + partner.mobile.split(' ').join('');
        }
        if(partner.email){
            str += '|' + partner.email;
        }
        if(partner.doc_number){
            str += '|' + partner.doc_number;
        }
        str = '' + partner.id + ':' + str.replace(':','') + '\n';
        return str;
    },
});

models.PosModel = models.PosModel.extend({
    push_and_invoice_order: function(order){
                var self = this;
        var invoiced = new $.Deferred();

        if(!order.get_client()){
            invoiced.reject({code:400, message:'Missing Customer', data:{}});
            return invoiced;
        }

        var order_id = this.db.add_order(order.export_as_JSON());

        this.flush_mutex.exec(function(){
            var done = new $.Deferred(); // holds the mutex

            // send the order to the server
            // we have a 30 seconds timeout on this push.
            // FIXME: if the server takes more than 30 seconds to accept the order,
            // the client will believe it wasn't successfully sent, and very bad
            // things will happen as a duplicate will be sent next time
            // so we must make sure the server detects and ignores duplicated orders

            var transfer = self._flush_orders([self.db.get_order(order_id)], {timeout:30000, to_invoice:true});

            transfer.fail(function(error){
                invoiced.reject(error);
                done.reject();
            });

            // on success, get the order id generated by the server
            transfer.pipe(function(order_server_id){

                // generate the pdf and download it
                if (order_server_id.length) {
                    invoiced.resolve();
                    done.resolve();

                } else {
                    // The order has been pushed separately in batch when
                    // the connection came back.
                    // The user has to go to the backend to print the invoice
                    invoiced.reject({code:401, message:'Backend Invoice', data:{order: order}});
                    done.reject();
                }
            });

            return done;

        });

        return invoiced;
    },
});



screens.ReceiptScreenWidget.include({
    render_receipt: function() {
        var order = this.pos.get_order();
        var self =this
        GetInvoiceDetails(PrintRecepit);

        function PrintRecepit(result) {
          if(result){
          console.log('algo')
          self.$('.pos-receipt-container').html(QWeb.render('PosTicket',{
                widget:self,
                order: order,
                receipt: order.export_for_printing(),
                orderlines: order.get_orderlines(),
                paymentlines: order.get_paymentlines(),
                nro_comprobante: result.number,
                exoneradas: result.exoneradas,
                inafectas: result.inafectas,
                gravadas: result.gravadas,
                total_igv: result.igv,
                total_icbper: result.icbper,
                id_invoice: result.id_invoice,
                digest: result.digest,

            }));
          }
        }

        function GetInvoiceDetails(callback) {
          console.log('this first');
          console.log(order.name);
            rpc.query({
                model:'pos.order',
                method: 'get_invoice_details',
                args: [order.name]
            }).then(
            function(result){
            //new Model('pos.order').call('get_invoice_details', [order.name]).then(function (result){

                callback(result);
            });


            }

    },

})
*/
models.PosModel = models.PosModel.extend({
    is_electronic: function () {
        return this.config.is_electronic;
    },
});


models.Order = models.Order.extend({
    initialize: function(attributes,options){
        OrderSuper.prototype.initialize.apply(this, arguments);
    },
    export_for_printing: function () {
        var result = _super_Order.export_for_printing.apply(this, arguments);
        result.account_move = this.get_account_move();
        var company = this.pos.company;
        result.company.logo_ticket = 'data:image/png;base64,'+company.logo_ticket
        result.company.nro_resolucion = company.nro_resolucion

        console.log('-->',result)
        return result;
    },
    set_account_move_fields: function (result) {
        this.account_move = {
            'qr_code':result.qr_code1,
            'digest_value':result.digest_value,
            'edocument_number':result.edocument_number,
            'afecto_amount_total':result.afecto_amount_total,
            'exonerated_amount_total':result.exonerated_amount_total,
            'inafecto_amount_total':result.inafecto_amount_total,
            'igv_amount_total':result.igv_amount_total,
            'icbper_amount_total':result.icbper_amount_total,
            'amount_text':result.amount_text,
            'id_invoice':result.id_invoice,

        };
    },
    get_account_move: function () {
        return this.account_move;
    },
    wait_for_push_order: function () {
        var result = _super_Order.wait_for_push_order.apply(this, arguments);
        result = Boolean(result || this.pos.is_electronic());
        return result;
    }
    /*
    export_for_printing: function(){
        var receipt = _super_Order.export_for_printing.call(this);
        var res = {}
        console.log(receipt)
        console.log(this)
        receipt.client = {
            'name':this.attributes.client.name,
            'street':this.attributes.client.street,
            'doc_number':this.attributes.client.doc_number,
            'doc_type':this.attributes.client.doc_type[0],
        }

        this.pos.rpc({
            model:'pos.order',
            method: 'get_invoice_details',
            args: [this.name]
        }).then(
        function(result){
            res = result
        });
        receipt.account_move = res
        console.log('RECEIPT UPDATE')
        receipt.test = 'test'
        console.log(receipt)

        return receipt;

    },*/

});
const PaymentScreenInherit = (PaymentScreen) =>
        class extends PaymentScreen {
            constructor(){
                super(...arguments);
            }

            async validateOrder(isForceValidate) {
                var payment_screen = super.validateOrder(isForceValidate);
                if (!this.currentOrder.get_client() && this.env.pos.config.anonymous_id) {
                    var new_client = this.env.pos.db.get_partner_by_id(this.env.pos.config.anonymous_id[0]);
                    if ( new_client ) {
                        this.currentOrder.fiscal_position = _.find(this.env.pos.config.fiscal_positions, function (fp) {
                            return fp.id === new_client.property_account_position_id[0];
                        });
                    } else {
                        this.currentOrder.fiscal_position = undefined;
                    }
                    if (new_client){
                        this.currentOrder.set_client(new_client);
                    }
                }
                var doc_type = this.currentOrder.get_doc_type();
                var doc_number = this.currentOrder.get_doc_number();
                if ( !doc_type ) {
                    return this.showPopup('ErrorPopup', {
                      title: _('El cliente no tiene definido el tipo de documento'),
                    });
                }

                if ( !doc_number ) {
                    return this.showPopup('ErrorPopup', {
                      title: _('El cliente no tiene definido el numero de documento'),
                    });
                }
                if (!this.env.pos.config.sale_invoice_id || !this.env.pos.config.sale_ticket_id){
                    return this.showPopup('ErrorPopup', {
                      title: _('El tipo de comprobante de pago es requerido, Ve a configuraci√≥n del POS'),
                    });
                }
                if (doc_type == "6"){
                    if ( doc_number && !doc_number.length==11) {
                        return this.showPopup('ErrorPopup', {
                          title: _('El tipo de documento RUC debe tener 11 digitos'),
                        });
                    }
                    this.currentOrder.set_document_type_id(this.env.pos.config.sale_invoice_id[0]);
                }
                else{
                    if (doc_type == "1"){
                        if ( doc_number && !doc_number.length==8) {
                           return this.showPopup('ErrorPopup', {
                              title: _('El tipo de documento DNI debe tener 8 digitos'),
                            });
                        }
                    }
                    this.currentOrder.set_document_type_id(this.env.pos.config.sale_ticket_id[0]);
                }

                if (!this.currentOrder.is_to_invoice() && this.currentOrder.get_client()){
                    this.currentOrder.set_to_invoice(true);
                }
                return payment_screen;
            }

            async _postPushOrderResolve(order, order_server_ids) {
                try {
                    if (this.env.pos.is_electronic()) {
                    const result = await this.rpc({
                        model: 'pos.order',
                        method: 'search_read',
                        domain: [['id', 'in', order_server_ids]],
                        fields: ['id_invoice','amount_text','qr_code1','digest_value','edocument_number','afecto_amount_total','exonerated_amount_total','inafecto_amount_total','igv_amount_total','icbper_amount_total',],
                        context: session.user_context,
                    });
                    order.set_account_move_fields(result[0] || false);
                    }
                } finally {
                    return super._postPushOrderResolve(...arguments);
                }
            }

        }

    Registries.Component.extend(PaymentScreen, PaymentScreenInherit);

    return PaymentScreenInherit;

});
